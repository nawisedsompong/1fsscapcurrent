PROCEDURE "claimApprovalStructure"( out LT_VAR_OUT NVARCHAR(2),
	-- out LT_SERVICE_INSTATNCE  TABLE (
 --   	"CLAIM_CODE"			NVARCHAR(20),
 --   	"DESCRIPTION"			NVARCHAR(100),	
 --   	"FIRST_LEVEL_APPROVER" NVARCHAR(100),
 --   	"SECOND_LEVEL_APPROVER" NVARCHAR(100),
 --   	"FINAL	_APPROVER" NVARCHAR(100),
 --   	"CLAIM_REFERENCE" NVARCHAR(150),
 --   	"EMPLOYEE_ID" NVARCHAR (50),
 --   	"CLAIM_DATE" DATE
		 --),
IN LT_CLAIM_TABLE "tt_claim_type",
IN LT_CATEGORY_CODE VARCHAR(50),
IN LT_CLAIM_OWNER VARCHAR(50),
IN CANCEL_FLAG	VARCHAR(10)
-- TABLE (
--     	"Claim_Reference"  NVARCHAR(150)
--     	 --Employee_ID  NVARCHAR (50),
--     	 --Employee_Name  NVARCHAR(100),
--     	 --Claim_Type  NVARCHAR(50),
--     	 --Claim_Date  DATE,
--     	 --Amount   Decimal(10,2),
--     	 --Claim_Status NVARCHAR (50),
--     	 --Category_Code NVARCHAR (50),
--     	 --Claim_Owner_id NVARCHAR (50)
-- 		 )
)
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   --DEFAULT SCHEMA <default_schema_name>
 AS
BEGIN
		DECLARE IDX INT;
		DECLARE MAXIDX INT;
		DECLARE lv_index INT;
		DECLARE LT_EMP_TABLE "tt_ApprStru_table_type";
		DECLARE LT_EMP_TABLE_HR "tt_ApprStru_table_type";
		DECLARE CLAIM_WRC_FILTER VARCHAR(50);
		DECLARE CLAIM_STATUS_VALUE VARCHAR(50);
		DECLARE EMPLOYEE_UPDATE VARCHAR(30);
		DECLARE YEAR_UPDATE VARCHAR(20);
		
		
		IF :LT_CATEGORY_CODE ='WRC' or :LT_CATEGORY_CODE ='WRC_HR' or :LT_CATEGORY_CODE ='TC' or :LT_CATEGORY_CODE ='COV' or :LT_CATEGORY_CODE ='SP' or :LT_CATEGORY_CODE ='SP1' 
        or :LT_CATEGORY_CODE ='SP2' or :LT_CATEGORY_CODE ='SP3' or :LT_CATEGORY_CODE ='SDFC' or :LT_CATEGORY_CODE ='SDFR'
        or :LT_CATEGORY_CODE ='CPC' or :LT_CATEGORY_CODE ='OC' or :LT_CATEGORY_CODE ='PAY_UP' THEN
		
		-- IF :LT_CATEGORY_CODE ='WRC'  THEN
		-- 	CLAIM_WRC_FILTER= 'WRBC';
		-- ELSEIF :LT_CATEGORY_CODE ='WRC_HR' THEN
		-- 	CLAIM_WRC_FILTER= 'KKH';
		-- ELSEIF :LT_CATEGORY_CODE ='TC' THEN
		-- 	CLAIM_WRC_FILTER= 'KKH';
		-- ELSEIF :LT_CATEGORY_CODE ='COV' THEN
		-- 	CLAIM_WRC_FILTER= 'KKH';
		-- ELSEIF :LT_CATEGORY_CODE ='SP' THEN
		-- 	CLAIM_WRC_FILTER= 'KKH';
		-- END IF;
		
		LT_CLAIM_TABLE=SELECT * FROM "get_TopClaimFromMaster"(:LT_CLAIM_TABLE,:LT_CATEGORY_CODE);
		
		END IF;
		
		LT_EMP_TABLE=SELECT * FROM "get_ApprovalStructure_Epm"(:LT_CLAIM_TABLE,:LT_CLAIM_OWNER);
		LT_EMP_TABLE_HR=SELECT * FROM "get_ApprovalStructure_Hr"(:LT_CLAIM_TABLE,:LT_CLAIM_OWNER);
	
		
		-- LT_CLAIM_STATUS_INSERT = SELECT 
		-- 						AST."CLAIM_CODE",
		-- 						AST."DESCRIPTION",
		-- 						asclAdmin."ADMIN",
		-- 						AST."FIRST_LEVEL_APPROVER",
		-- 						AST."SECOND_LEVEL_APPROVER",
		-- 						AST."THIRD_LEVEL_APPROVER",
		-- 						AST."HR_CHECKER"."USERID" as"HR_CHECKER_USERID",
		-- 						-- AST."HR_MAKER",
		-- 						CT."CLAIM_REFERENCE",
		-- 						CT."EMPLOYEE_ID",
		-- 						CT."CLAIM_DATE",
		-- 						CT."CATEGORY_CODE",
		-- 						CT."CLAIM_AMOUNT",
		-- 						CT."CLAIM_CATEGORY",
		-- 						CT."SUBMITTED_BY",
		-- 						CT."BEHALF_FLAG",
		-- 						ro."LOCATION_RO_EMPLOYEEID",
		-- 						cs."TOTAL_LEVEL"
		-- 					FROM "BENEFIT_APPROVAL_STRUCTURE" AST
		-- 					INNER JOIN :LT_EMP_TABLE AppEmp
		-- 					on AppEmp."SEQUENCE_OF_CHECK" = AST."SEQUENCE_OF_CHECK" AND AppEmp."CLAIM_CODE"=AST."CLAIM_CODE"
		-- 					INNER JOIN :LT_CLAIM_TABLE CT
		-- 					ON AppEmp."CLAIM_CODE"=CT."CLAIM_CODE" and AppEmp."CLAIM_REFERENCE" = CT."CLAIM_REFERENCE" and AppEmp."EMPLOYEE_ID" = CT."EMPLOYEE_ID"
		-- 					LEFT JOIN "BENEFIT_CLAIM_ADMIN" asclAdmin
		-- 					ON asclAdmin."CLAIM_CODE"=CT."CLAIM_CODE"
		-- 					LEFT JOIN "SF_EMPLOYEEINFORMATION"(UserID => :LT_CLAIM_OWNER) empmast
		-- 					on empmast."PERSONIDEXTERNAL"=CT."EMPLOYEE_ID" 
		-- 					-- and empmast."PAYGRADE" = AST."PAY_GRADE" OR AST."PAY_GRADE"= 'ALL'
		-- 					-- and empmast."SPONSOR" = AST."SPONSOR_INSTITUTION" OR AST."SPONSOR_INSTITUTION"= 'ALL'
		-- 					-- and empmast."DEPARTMENT" = AST."EMPLOYEE_DEPARTMENT" OR AST."EMPLOYEE_DEPARTMENT"= 'ALL'
		-- 					-- and empmast."DIVISION" = AST."EMPLOYEE_DIVISION" OR AST."EMPLOYEE_DIVISION"= 'ALL'
		-- 					-- and empmast."PERSONAL_AREA" = AST."PERSONNEL_AREA" OR AST."PERSONNEL_AREA"= 'ALL'
		-- 					-- and empmast."PERSONAL_SUB_AREA" = AST."PERSONAL_SUBAREA" OR AST."PERSONAL_SUBAREA"= 'ALL'
		-- 					LEFT JOIN "BENEFIT_LOCATION_RO" ro 
		-- 					ON ro."DEPARTMENT"=empmast."DEPARTMENT" and ro."DIVISION"=empmast."DIVISION"
		-- 					LEFT JOIN "BENEFIT_CLAIM_STATUS" as cs
		-- 					ON CT."CLAIM_REFERENCE"=cs."CLAIM_REFERENCE" AND CT."EMPLOYEE_ID"=cs."EMPLOYEE_ID" ;
							-- where cs."CLAIM_REFERENCE" IS NULL;
							
						-- FOR lv_index IN 1..record_count(:LT_CLAIM_STATUS_INSERT) DO 
						-- 	:LT_CLAIM_STATUS_INSERT.(ADMIN).UPDATE((''), lv_index);
						-- 	:LT_CLAIM_STATUS_INSERT.(FIRST_LEVEL_APPROVER).UPDATE(('LocationRO'), lv_index);
						-- 	:LT_CLAIM_STATUS_INSERT.(SECOND_LEVEL_APPROVER).UPDATE(('N/A'), lv_index);
						-- 	:LT_CLAIM_STATUS_INSERT.(THIRD_LEVEL_APPROVER).UPDATE(('N/A'), lv_index);
						-- END FOR;
		
		-- ELSE
		LT_CLAIM_STATUS_INSERT = SELECT 
								AST."CLAIM_CODE",
								AST."DESCRIPTION",
								asclAdmin."ADMIN",
								-- AST."FIRST_LEVEL_APPROVER",
								CASE 
									WHEN CT."FIRST_LEVEL_APPROVER" != null or CT."FIRST_LEVEL_APPROVER" != '' or CT."FIRST_LEVEL_APPROVER" != 'N/A' 
									 THEN CT."FIRST_LEVEL_APPROVER"
									ELSE AST."FIRST_LEVEL_APPROVER"
									END as "FIRST_LEVEL_APPROVER",
								AST."SECOND_LEVEL_APPROVER",
								AST."THIRD_LEVEL_APPROVER",
								AST."FOURTH_LEVEL_APPROVER",
								-- AST."HR_CHECKER"."USERID" as"HR_CHECKER_USERID",
								AST_HR."HR_CHECKER"."USERID" as"HR_CHECKER_USERID",
								-- AST."HR_MAKER",
								CT."CLAIM_REFERENCE",
								CT."CLAIM_TYPE",
								CT."EMPLOYEE_ID",
								CT."CLAIM_DATE",
								CT."CATEGORY_CODE",
								CT."CLAIM_AMOUNT",
								CT."CLAIM_CATEGORY",
								CT."SUBMITTED_BY",
								CT."BEHALF_FLAG",
								CT."REMARKS_EMPLOYEE",
								CT."RECEIPT_DATE",
								-- ro."LOCATION_RO_EMPLOYEEID",
								cs."TOTAL_LEVEL",
								empmast."MANAGERID"
							FROM "BENEFIT_APPROVAL_STRUCTURE" AST
							INNER JOIN :LT_EMP_TABLE AppEmp
							on AppEmp."SEQUENCE_OF_CHECK" = AST."SEQUENCE_OF_CHECK" AND AppEmp."CLAIM_CODE"=AST."CLAIM_CODE"
							INNER JOIN :LT_CLAIM_TABLE CT
							ON AppEmp."CLAIM_CODE"=CT."CLAIM_CODE" and AppEmp."CLAIM_REFERENCE" = CT."CLAIM_REFERENCE" and AppEmp."EMPLOYEE_ID" = CT."EMPLOYEE_ID"
							LEFT JOIN "BENEFIT_CLAIM_ADMIN" asclAdmin
							ON asclAdmin."CLAIM_CODE"=CT."CLAIM_CODE"
							LEFT JOIN "SF_EMPLOYEEINFORMATION"(UserID => :LT_CLAIM_OWNER) empmast
							on empmast."PERSONIDEXTERNAL"=CT."EMPLOYEE_ID" 
							and empmast."STARTDATE" < TO_SECONDDATE (CONCAT(CT."RECEIPT_DATE", ' 00:00:00'), 'YYYY-MM-DD HH24:MI:SS')
							and empmast."ENDDATE" > TO_SECONDDATE (CONCAT(CT."RECEIPT_DATE", ' 00:00:00'), 'YYYY-MM-DD HH24:MI:SS')
							-- and empmast."PAYGRADE" = AST."PAY_GRADE" OR AST."PAY_GRADE"= 'ALL'
							-- and empmast."SPONSOR" = AST."SPONSOR_INSTITUTION" OR AST."SPONSOR_INSTITUTION"= 'ALL'
							-- and empmast."DEPARTMENT" = AST."EMPLOYEE_DEPARTMENT" OR AST."EMPLOYEE_DEPARTMENT"= 'ALL'
							-- and empmast."DIVISION" = AST."EMPLOYEE_DIVISION" OR AST."EMPLOYEE_DIVISION"= 'ALL'
							-- and empmast."PERSONAL_AREA" = AST."PERSONNEL_AREA" OR AST."PERSONNEL_AREA"= 'ALL'
							-- and empmast."PERSONAL_SUB_AREA" = AST."PERSONAL_SUBAREA" OR AST."PERSONAL_SUBAREA"= 'ALL'
							-- LEFT JOIN "BENEFIT_LOCATION_RO" ro 
							-- ON ro."DEPARTMENT"=empmast."DEPARTMENT" and ro."DIVISION"=empmast."DIVISION"
							LEFT JOIN "BENEFIT_CLAIM_STATUS" as cs
							ON CT."CLAIM_REFERENCE"=cs."CLAIM_REFERENCE" AND CT."EMPLOYEE_ID"=cs."EMPLOYEE_ID" 
							LEFT JOIN :LT_EMP_TABLE_HR AS HRMAKER
							ON HRMAKER."CLAIM_CODE"=CT."CLAIM_CODE" and HRMAKER."CLAIM_REFERENCE" = CT."CLAIM_REFERENCE"
							LEFT JOIN "BENEFIT_APPROVAL_STRUCTURE_HR" AS AST_HR
							ON HRMAKER."SEQUENCE_OF_CHECK" = AST_HR."SEQUENCE_OF_CHECK" AND HRMAKER."CLAIM_CODE"=AST_HR."CLAIM_CODE"
							;
							-- where cs."CLAIM_REFERENCE" IS NULL;
		-- END IF;
		-- LT_CLAIM_STATUS_INSERT=  SELECT cl."EMPLOYEE_ID",
		-- 							    cl."CLAIM_REFERENCE",
		-- 							    cl."FIRST_LEVEL_APPROVER",
		-- 							    cl."CLAIM_DATE",
		-- 							    cl."THIRD_LEVEL_APPROVER",
		-- 							    cl."SECOND_LEVEL_APPROVER",
		-- 							    cs."TOTAL_LEVEL",
		-- 							    cl."ADMIN",
		-- 							    cl."LOCATION_RO_EMPLOYEEID"
		-- 							FROM :LT_SERVICE_INSTATNCE as cl 
	
	      MAXIDX = RECORD_COUNT(:LT_CLAIM_STATUS_INSERT);
	      
	      FOR IDX IN 1..MAXIDX DO
    			-- DECLARE V1 DECIMAL(10, 2) = :IT.V[IDX] * :IT.PCT[IDX] / 100;
    			-- DECLARE V2 DECIMAL(10, 2) = :IT.V[IDX] - V1;
    			-- :OT1.INSERT((:IT.K[IDX], V1));
    			-- :OT2.INSERT((:IT.K[IDX], V2));
    		IF :LT_CLAIM_STATUS_INSERT.BEHALF_FLAG[IDX]='Y' THEN
    			LT_CLAIM_STATUS_INSERT.FIRST_LEVEL_APPROVER[IDX]=:LT_CLAIM_STATUS_INSERT.HR_CHECKER_USERID[IDX];
    			LT_CLAIM_STATUS_INSERT.SECOND_LEVEL_APPROVER[IDX]='N/A';
    			LT_CLAIM_STATUS_INSERT.THIRD_LEVEL_APPROVER[IDX]='N/A';
    			LT_CLAIM_STATUS_INSERT.FOURTH_LEVEL_APPROVER[IDX]='N/A';
    			LT_CLAIM_STATUS_INSERT.TOTAL_LEVEL[IDX]='1';
    		ELSE
    			IF :LT_CLAIM_STATUS_INSERT.FIRST_LEVEL_APPROVER[IDX]='ClaimsAdministrator' THEN
    				LT_CLAIM_STATUS_INSERT.FIRST_LEVEL_APPROVER[IDX]=:LT_CLAIM_STATUS_INSERT.ADMIN[IDX];
    			END IF;
    			IF :LT_CLAIM_STATUS_INSERT.SECOND_LEVEL_APPROVER[IDX]='ClaimsAdministrator' THEN
    			LT_CLAIM_STATUS_INSERT.SECOND_LEVEL_APPROVER[IDX]=:LT_CLAIM_STATUS_INSERT.ADMIN[IDX];
    			END IF;
    			IF :LT_CLAIM_STATUS_INSERT.THIRD_LEVEL_APPROVER[IDX]='ClaimsAdministrator'THEN
    			LT_CLAIM_STATUS_INSERT.THIRD_LEVEL_APPROVER[IDX]=:LT_CLAIM_STATUS_INSERT.ADMIN[IDX];
    			END IF;
    			IF :LT_CLAIM_STATUS_INSERT.FOURTH_LEVEL_APPROVER[IDX]='ClaimsAdministrator'THEN
    			LT_CLAIM_STATUS_INSERT.FOURTH_LEVEL_APPROVER[IDX]=:LT_CLAIM_STATUS_INSERT.ADMIN[IDX];
    			END IF;
    			-- IF :LT_CLAIM_STATUS_INSERT.FIRST_LEVEL_APPROVER[IDX]='LocationRO' THEN
    			-- LT_CLAIM_STATUS_INSERT.FIRST_LEVEL_APPROVER[IDX]=:LT_CLAIM_STATUS_INSERT.LOCATION_RO_EMPLOYEEID[IDX];
    			-- END IF;
    			-- IF :LT_CLAIM_STATUS_INSERT.SECOND_LEVEL_APPROVER[IDX]='LocationRO' THEN
    			-- LT_CLAIM_STATUS_INSERT.SECOND_LEVEL_APPROVER[IDX]=:LT_CLAIM_STATUS_INSERT.LOCATION_RO_EMPLOYEEID[IDX];
    			-- END IF;
    			-- IF :LT_CLAIM_STATUS_INSERT.THIRD_LEVEL_APPROVER[IDX]='LocationRO' THEN
    			-- LT_CLAIM_STATUS_INSERT.THIRD_LEVEL_APPROVER[IDX]=:LT_CLAIM_STATUS_INSERT.LOCATION_RO_EMPLOYEEID[IDX];
    			-- END IF;
    			IF :LT_CLAIM_STATUS_INSERT.FIRST_LEVEL_APPROVER[IDX]='RO' THEN
    			LT_CLAIM_STATUS_INSERT.FIRST_LEVEL_APPROVER[IDX]=:LT_CLAIM_STATUS_INSERT.MANAGERID[IDX];
    			END IF;
    			IF :LT_CLAIM_STATUS_INSERT.SECOND_LEVEL_APPROVER[IDX]='RO' THEN
    			LT_CLAIM_STATUS_INSERT.SECOND_LEVEL_APPROVER[IDX]=:LT_CLAIM_STATUS_INSERT.MANAGERID[IDX];
    			END IF;
    			IF :LT_CLAIM_STATUS_INSERT.THIRD_LEVEL_APPROVER[IDX]='RO' THEN
    			LT_CLAIM_STATUS_INSERT.THIRD_LEVEL_APPROVER[IDX]=:LT_CLAIM_STATUS_INSERT.MANAGERID[IDX];
    			END IF;
    			IF :LT_CLAIM_STATUS_INSERT.FOURTH_LEVEL_APPROVER[IDX]='RO' THEN
    			LT_CLAIM_STATUS_INSERT.FOURTH_LEVEL_APPROVER[IDX]=:LT_CLAIM_STATUS_INSERT.MANAGERID[IDX];
    			END IF;
    			IF :LT_CLAIM_STATUS_INSERT.FIRST_LEVEL_APPROVER[IDX]='N/A' THEN
    			LT_CLAIM_STATUS_INSERT.TOTAL_LEVEL[IDX]='0';
    			ELSEIF :LT_CLAIM_STATUS_INSERT.SECOND_LEVEL_APPROVER[IDX]='N/A' THEN
    			LT_CLAIM_STATUS_INSERT.TOTAL_LEVEL[IDX]='1';
    			ELSEIF :LT_CLAIM_STATUS_INSERT.THIRD_LEVEL_APPROVER[IDX]='N/A' THEN
    			LT_CLAIM_STATUS_INSERT.TOTAL_LEVEL[IDX]='2';
    			ELSEIF :LT_CLAIM_STATUS_INSERT.FOURTH_LEVEL_APPROVER[IDX]='N/A' THEN
    			LT_CLAIM_STATUS_INSERT.TOTAL_LEVEL[IDX]='3';
    			ELSE
    			LT_CLAIM_STATUS_INSERT.TOTAL_LEVEL[IDX]='4';
    			END IF;
    		END IF;
		 END FOR;
		
		 IF :CANCEL_FLAG <> 'CANCEL' THEN
			 CLAIM_STATUS_VALUE = 'Pending for approval, Level 1';
		ELSE
			CLAIM_STATUS_VALUE = 'Cancellation Pending for approval, Level 1';
		END IF;
	    -- LT_CLAIM_STATUS_UPDATE=  SELECT FROM :LT_SERVICE_INSTATNCE as cl INNER JOIN "BENEFIT_CLAIM_STATUS" as cs
					-- 		ON cl."CLAIM_REFERENCE"=cs."Claim_Reference" AND cl."EMPLOYEE_ID"=cs."Employee_Id" ;
					
			   INSERT INTO "BENEFIT_CLAIM_STATUS"(
			SELECT
				cs."EMPLOYEE_ID",
				cs."CLAIM_REFERENCE",
				-- cs."CLAIM_DATE",
				CURRENT_DATE,
				NULL,
				:CLAIM_STATUS_VALUE,
				cs."EMPLOYEE_ID",
				cs."TOTAL_LEVEL",
				'1',
				cs."FIRST_LEVEL_APPROVER",
				cs."SECOND_LEVEL_APPROVER",
				cs."THIRD_LEVEL_APPROVER",
				cs."FOURTH_LEVEL_APPROVER",
				cs."REMARKS_EMPLOYEE",
				'',
				'',
				'',
				'',
				'',
				NULL,
				NULL,
				NULL,
				NULL,
				cs."SUBMITTED_BY",
				:CANCEL_FLAG,
				'',
				-- CASE 
				-- 	WHEN DELEGATE1."DELEGATOR_ID" != null or DELEGATE1."DELEGATOR_ID" != '' or DELEGATE1."DELEGATOR_ID" != 'N/A' 
				-- 	THEN DELEGATE1."DELEGATOR_ID"
				-- 	ELSE ''
				-- 	END,
				-- CASE 
				-- 	WHEN DELEGATE2."DELEGATOR_ID" != null or DELEGATE2."DELEGATOR_ID" != '' or DELEGATE2."DELEGATOR_ID" != 'N/A' 
				-- 	THEN DELEGATE2."DELEGATOR_ID"
				-- 	ELSE ''
				-- 	END,
				-- CASE 
				-- 	WHEN DELEGATE3."DELEGATOR_ID" != null or DELEGATE3."DELEGATOR_ID" != '' or DELEGATE3."DELEGATOR_ID" != 'N/A' 
				-- 	THEN DELEGATE3."DELEGATOR_ID"
				-- 	ELSE ''
				-- 	END,
				-- CASE 
				-- 	WHEN DELEGATE4."DELEGATOR_ID" != null or DELEGATE4."DELEGATOR_ID" != '' or DELEGATE4."DELEGATOR_ID" != 'N/A' 
				-- 	THEN DELEGATE4."DELEGATOR_ID"
				-- 	ELSE ''
				-- 	END,
				'',
				'',
				'',
				'',
				'',
				'',
				'',
				'',
				''
			FROM :LT_CLAIM_STATUS_INSERT cs
			-- LEFT JOIN "BENEFIT_DELEGATOR" DELEGATE1
			-- ON cs."FIRST_LEVEL_APPROVER"=DELEGATE1."APPROVER_ID"
			-- AND DELEGATE1."START_DATE" <= CURRENT_DATE
			-- AND DELEGATE1."END_DATE" >= CURRENT_DATE
			-- LEFT JOIN "BENEFIT_DELEGATOR" DELEGATE2
			-- ON cs."SECOND_LEVEL_APPROVER"=DELEGATE2."APPROVER_ID"
			-- AND DELEGATE2."START_DATE" <= CURRENT_DATE
			-- AND DELEGATE2."END_DATE" >= CURRENT_DATE
			-- LEFT JOIN "BENEFIT_DELEGATOR" DELEGATE3
			-- ON cs."THIRD_LEVEL_APPROVER"=DELEGATE3."APPROVER_ID"
			-- AND DELEGATE3."START_DATE" <= CURRENT_DATE
			-- AND DELEGATE3."END_DATE" >= CURRENT_DATE
			-- LEFT JOIN "BENEFIT_DELEGATOR" DELEGATE4
			-- ON cs."FOURTH_LEVEL_APPROVER"=DELEGATE4."APPROVER_ID"
			-- AND DELEGATE4."START_DATE" <= CURRENT_DATE
			-- AND DELEGATE4."END_DATE" >= CURRENT_DATE
		);
		
		
			   INSERT INTO "BENEFIT_APPROVAL"(
			SELECT
			"CLAIM_REFERENCE",
				"FIRST_LEVEL_APPROVER",
				"FIRST_LEVEL_APPROVER",
				 CASE 
					WHEN :LT_CATEGORY_CODE ='WRC' or :LT_CATEGORY_CODE ='WRC_HR' or :LT_CATEGORY_CODE ='TC' 
					or :LT_CATEGORY_CODE ='COV' or :LT_CATEGORY_CODE ='SP' or :LT_CATEGORY_CODE ='SP1'
                    or :LT_CATEGORY_CODE ='SP2' or :LT_CATEGORY_CODE ='SP3' or :LT_CATEGORY_CODE ='SDFC' or :LT_CATEGORY_CODE ='SDFR'
        			or :LT_CATEGORY_CODE ='CPC' or :LT_CATEGORY_CODE ='OC' or :LT_CATEGORY_CODE ='PAY_UP' THEN "CATEGORY_CODE" 
					-- WHEN :LT_CATEGORY_CODE ='SP' THEN "CLAIM_TYPE"
					ELSE "CLAIM_CODE"
					END,
				"CLAIM_DATE",
				"CLAIM_AMOUNT",
				:CLAIM_STATUS_VALUE,
				"CATEGORY_CODE",
				"EMPLOYEE_ID",
				"CLAIM_CATEGORY",
				"SUBMITTED_BY",
				'',
				"RECEIPT_DATE"
			FROM :LT_CLAIM_STATUS_INSERT
		);
		
		----YTD Report Status
		
			
			EMPLOYEE_UPDATE =:LT_CLAIM_TABLE.EMPLOYEE_ID[1];
			YEAR_UPDATE =  EXTRACT(YEAR FROM :LT_CLAIM_TABLE.CLAIM_DATE[1]);
			
			UPSERT "CALCULATION_YTD_EMPLOYEE_CLAIM_STATUS" VALUES (:EMPLOYEE_UPDATE , :YEAR_UPDATE ,'U') 
			WHERE "EMPLOYEE_ID" = :EMPLOYEE_UPDATE
			AND YEAR = :YEAR_UPDATE;
			-- MERGE INTO "CALCULATION_YTD_EMPLOYEE_CLAIM_STATUS" YTD
   -- 				USING "BENEFIT_CLAIM_STATUS" AS CLS
   -- 				ON YTD."EMPLOYEE_ID"   = CLS."EMPLOYEE_ID"
			-- 		AND YTD."YEAR"   = EXTRACT(YEAR FROM CLS."SUBMIT_DATE")
   -- 				WHEN MATCHED THEN UPDATE SET YTD."STATUS" = 'U'
   -- 				WHEN NOT MATCHED THEN INSERT(
   -- 											EMPLOYEE_ID,
			-- 									YEAR,
			-- 									STATUS
   -- 				) VALUES (					
   -- 											CLS.EMPLOYEE_ID,
			-- 									EXTRACT(YEAR FROM CLS."SUBMIT_DATE"),
			-- 									'U'
   -- 				);
    			
		---Medical Claim
		MERGE INTO "BENEFIT_MEDICAL_CLAIM" MC
    				USING :LT_CLAIM_STATUS_INSERT AS CLS
    				ON MC."EMPLOYEE_ID"   = CLS."EMPLOYEE_ID"
					AND MC."CLAIM_REFERENCE"= CLS."CLAIM_REFERENCE"
    				WHEN MATCHED THEN UPDATE SET MC."FIRST_LEVEL_APPROVER" = CLS."FIRST_LEVEL_APPROVER",
    				MC."SECOND_LEVEL_APPROVER" = CLS."SECOND_LEVEL_APPROVER",
    				MC."THIRD_LEVEL_APPROVER" = CLS."THIRD_LEVEL_APPROVER",
    				MC."SUBMITTED_ON" = CURRENT_DATE,
    				MC."CLAIM_STATUS" = :CLAIM_STATUS_VALUE;
    				
    				
    			MERGE INTO "BENEFIT_CPR_CLAIM" CPR
    				USING :LT_CLAIM_STATUS_INSERT AS CLS
    				ON CPR."EMPLOYEE_ID"   = CLS."EMPLOYEE_ID"
					AND CPR."CLAIM_REFERENCE"= CLS."CLAIM_REFERENCE"
    				WHEN MATCHED THEN UPDATE SET CPR."FIRST_LEVEL_APPROVER" = CLS."FIRST_LEVEL_APPROVER",
    				CPR."SECOND_LEVEL_APPROVER" = CLS."SECOND_LEVEL_APPROVER",
    				CPR."THIRD_LEVEL_APPROVER" = CLS."THIRD_LEVEL_APPROVER",
    				CPR."SUBMITTED_ON" = CURRENT_DATE,
    				CPR."CLAIM_STATUS" = :CLAIM_STATUS_VALUE;
    				
    				
    		---OverTime Claim
    		MERGE INTO "BENEFIT_OVERTIME_CLAIM" OVC
    				USING :LT_CLAIM_STATUS_INSERT AS CLS
    				ON OVC."EMPLOYEE_ID"   = CLS."EMPLOYEE_ID"
					AND OVC."CLAIM_REFERENCE"= CLS."CLAIM_REFERENCE"
    				WHEN MATCHED THEN UPDATE SET OVC."FIRST_LEVEL_APPROVER" = CLS."FIRST_LEVEL_APPROVER",
    				OVC."SECOND_LEVEL_APPROVER" = CLS."SECOND_LEVEL_APPROVER",
    				OVC."THIRD_LEVEL_APPROVER" = CLS."THIRD_LEVEL_APPROVER",
    				OVC."SUBMITTED_ON" = CURRENT_DATE,
    				OVC."CLAIM_STATUS" = :CLAIM_STATUS_VALUE;
    				
    			MERGE INTO "BENEFIT_WRC_HR_MASTER_CLAIM" WRCHR
    				USING :LT_CLAIM_STATUS_INSERT AS CLS
    				ON WRCHR."EMPLOYEE_ID"   = CLS."EMPLOYEE_ID"
					AND WRCHR."CLAIM_REFERENCE"= CLS."CLAIM_REFERENCE"
    				WHEN MATCHED THEN UPDATE SET WRCHR."FIRST_LEVEL_APPROVER" = CLS."FIRST_LEVEL_APPROVER",
    				WRCHR."SECOND_LEVEL_APPROVER" = CLS."SECOND_LEVEL_APPROVER",
    				WRCHR."THIRD_LEVEL_APPROVER" = CLS."THIRD_LEVEL_APPROVER",
    				WRCHR."FOURTH_LEVEL_APPROVER" = CLS."FOURTH_LEVEL_APPROVER",
    				WRCHR."SUBMITTED_ON" = CURRENT_DATE,
    				WRCHR."CLAIM_STATUS" = :CLAIM_STATUS_VALUE;
    			
    			---Work Related Claim
    		MERGE INTO "BENEFIT_WRC_MASTER_CLAIM" WRC
    				USING :LT_CLAIM_STATUS_INSERT AS CLS
    				ON WRC."EMPLOYEE_ID"   = CLS."EMPLOYEE_ID"
					AND WRC."CLAIM_REFERENCE"= CLS."CLAIM_REFERENCE"
    				WHEN MATCHED THEN UPDATE SET WRC."FIRST_LEVEL_APPROVER" = CLS."FIRST_LEVEL_APPROVER",
    				WRC."SECOND_LEVEL_APPROVER" = CLS."SECOND_LEVEL_APPROVER",
    				WRC."THIRD_LEVEL_APPROVER" = CLS."THIRD_LEVEL_APPROVER",
    				WRC."SUBMITTED_ON" = CURRENT_DATE,
    				WRC."CLAIM_STATUS" = :CLAIM_STATUS_VALUE;		
    				
    				
    			MERGE INTO "BENEFIT_TC_MASTER_CLAIM" WRC
    				USING :LT_CLAIM_STATUS_INSERT AS CLS
    				ON WRC."EMPLOYEE_ID"   = CLS."EMPLOYEE_ID"
					AND WRC."CLAIM_REFERENCE"= CLS."CLAIM_REFERENCE"
    				WHEN MATCHED THEN UPDATE SET WRC."FIRST_LEVEL_APPROVER" = CLS."FIRST_LEVEL_APPROVER",
    				WRC."SECOND_LEVEL_APPROVER" = CLS."SECOND_LEVEL_APPROVER",
    				WRC."THIRD_LEVEL_APPROVER" = CLS."THIRD_LEVEL_APPROVER",
    				WRC."SUBMITTED_ON" = CURRENT_DATE,
    				WRC."CLAIM_STATUS" = :CLAIM_STATUS_VALUE;	
    				
    				MERGE INTO "BENEFIT_COV_MASTER_CLAIM" WRC
    				USING :LT_CLAIM_STATUS_INSERT AS CLS
    				ON WRC."EMPLOYEE_ID"   = CLS."EMPLOYEE_ID"
					AND WRC."CLAIM_REFERENCE"= CLS."CLAIM_REFERENCE"
    				WHEN MATCHED THEN UPDATE SET WRC."FIRST_LEVEL_APPROVER" = CLS."FIRST_LEVEL_APPROVER",
    				WRC."SECOND_LEVEL_APPROVER" = CLS."SECOND_LEVEL_APPROVER",
    				WRC."THIRD_LEVEL_APPROVER" = CLS."THIRD_LEVEL_APPROVER",
    				WRC."SUBMITTED_ON" = CURRENT_DATE,
    				WRC."CLAIM_STATUS" = :CLAIM_STATUS_VALUE;
    				
    				MERGE INTO "BENEFIT_PC_CLAIM" WRC
    				USING :LT_CLAIM_STATUS_INSERT AS CLS
    				ON WRC."EMPLOYEE_ID"   = CLS."EMPLOYEE_ID"
					AND WRC."CLAIM_REFERENCE"= CLS."CLAIM_REFERENCE"
    				WHEN MATCHED THEN UPDATE SET WRC."FIRST_LEVEL_APPROVER" = CLS."FIRST_LEVEL_APPROVER",
    				WRC."SECOND_LEVEL_APPROVER" = CLS."SECOND_LEVEL_APPROVER",
    				WRC."THIRD_LEVEL_APPROVER" = CLS."THIRD_LEVEL_APPROVER",
    				WRC."SUBMITTED_ON" = CURRENT_DATE,
    				WRC."CLAIM_STATUS" = :CLAIM_STATUS_VALUE;
    				
    				MERGE INTO "BENEFIT_PTF_ACL_BCL_CLAIM" WRC
    				USING :LT_CLAIM_STATUS_INSERT AS CLS
    				ON WRC."EMPLOYEE_ID"   = CLS."EMPLOYEE_ID"
					AND WRC."CLAIM_REFERENCE"= CLS."CLAIM_REFERENCE"
    				WHEN MATCHED THEN UPDATE SET WRC."FIRST_LEVEL_APPROVER" = CLS."FIRST_LEVEL_APPROVER",
    				WRC."SECOND_LEVEL_APPROVER" = CLS."SECOND_LEVEL_APPROVER",
    				WRC."THIRD_LEVEL_APPROVER" = CLS."THIRD_LEVEL_APPROVER",
    				WRC."SUBMITTED_ON" = CURRENT_DATE,
    				WRC."CLAIM_STATUS" = :CLAIM_STATUS_VALUE;
    				
    				
    				MERGE INTO "BENEFIT_SP_MASTER_CLAIM" WRC
    				USING :LT_CLAIM_STATUS_INSERT AS CLS
    				ON WRC."EMPLOYEE_ID"   = CLS."EMPLOYEE_ID"
					AND WRC."CLAIM_REFERENCE"= CLS."CLAIM_REFERENCE"
    				WHEN MATCHED THEN UPDATE SET WRC."FIRST_LEVEL_APPROVER" = CLS."FIRST_LEVEL_APPROVER",
    				WRC."SECOND_LEVEL_APPROVER" = CLS."SECOND_LEVEL_APPROVER",
    				WRC."THIRD_LEVEL_APPROVER" = CLS."THIRD_LEVEL_APPROVER",
    				WRC."SUBMITTED_ON" = CURRENT_DATE,
    				WRC."CLAIM_STATUS" = :CLAIM_STATUS_VALUE;
    				

                    MERGE INTO "BENEFIT_SP1_MASTER_CLAIM" WRC
    				USING :LT_CLAIM_STATUS_INSERT AS CLS
    				ON WRC."EMPLOYEE_ID"   = CLS."EMPLOYEE_ID"
					AND WRC."CLAIM_REFERENCE"= CLS."CLAIM_REFERENCE"
    				WHEN MATCHED THEN UPDATE SET WRC."FIRST_LEVEL_APPROVER" = CLS."FIRST_LEVEL_APPROVER",
    				WRC."SECOND_LEVEL_APPROVER" = CLS."SECOND_LEVEL_APPROVER",
    				WRC."THIRD_LEVEL_APPROVER" = CLS."THIRD_LEVEL_APPROVER",
    				WRC."SUBMITTED_ON" = CURRENT_DATE,
    				WRC."CLAIM_STATUS" = :CLAIM_STATUS_VALUE;

                    MERGE INTO "BENEFIT_SP2_MASTER_CLAIM" WRC
    				USING :LT_CLAIM_STATUS_INSERT AS CLS
    				ON WRC."EMPLOYEE_ID"   = CLS."EMPLOYEE_ID"
					AND WRC."CLAIM_REFERENCE"= CLS."CLAIM_REFERENCE"
    				WHEN MATCHED THEN UPDATE SET WRC."FIRST_LEVEL_APPROVER" = CLS."FIRST_LEVEL_APPROVER",
    				WRC."SECOND_LEVEL_APPROVER" = CLS."SECOND_LEVEL_APPROVER",
    				WRC."THIRD_LEVEL_APPROVER" = CLS."THIRD_LEVEL_APPROVER",
    				WRC."SUBMITTED_ON" = CURRENT_DATE,
    				WRC."CLAIM_STATUS" = :CLAIM_STATUS_VALUE;

                    MERGE INTO "BENEFIT_SP3_MASTER_CLAIM" WRC
    				USING :LT_CLAIM_STATUS_INSERT AS CLS
    				ON WRC."EMPLOYEE_ID"   = CLS."EMPLOYEE_ID"
					AND WRC."CLAIM_REFERENCE"= CLS."CLAIM_REFERENCE"
    				WHEN MATCHED THEN UPDATE SET WRC."FIRST_LEVEL_APPROVER" = CLS."FIRST_LEVEL_APPROVER",
    				WRC."SECOND_LEVEL_APPROVER" = CLS."SECOND_LEVEL_APPROVER",
    				WRC."THIRD_LEVEL_APPROVER" = CLS."THIRD_LEVEL_APPROVER",
    				WRC."SUBMITTED_ON" = CURRENT_DATE,
    				WRC."CLAIM_STATUS" = :CLAIM_STATUS_VALUE;

                    
    				MERGE INTO "BENEFIT_AHP_LIC_MS_WIC_CLAIM" WRC
    				USING :LT_CLAIM_STATUS_INSERT AS CLS
    				ON WRC."EMPLOYEE_ID"   = CLS."EMPLOYEE_ID"
					AND WRC."CLAIM_REFERENCE"= CLS."CLAIM_REFERENCE"
    				WHEN MATCHED THEN UPDATE SET WRC."FIRST_LEVEL_APPROVER" = CLS."FIRST_LEVEL_APPROVER",
    				WRC."SECOND_LEVEL_APPROVER" = CLS."SECOND_LEVEL_APPROVER",
    				WRC."THIRD_LEVEL_APPROVER" = CLS."THIRD_LEVEL_APPROVER",
    				WRC."SUBMITTED_ON" = CURRENT_DATE,
    				WRC."CLAIM_STATUS" = :CLAIM_STATUS_VALUE;
    				
    				MERGE INTO "BENEFIT_SDFC_MASTER_CLAIM" SDFC
    				USING :LT_CLAIM_STATUS_INSERT AS CLS
    				ON SDFC."EMPLOYEE_ID"   = CLS."EMPLOYEE_ID"
					AND SDFC."CLAIM_REFERENCE"= CLS."CLAIM_REFERENCE"
    				WHEN MATCHED THEN UPDATE SET SDFC."FIRST_LEVEL_APPROVER" = CLS."FIRST_LEVEL_APPROVER",
    				SDFC."SECOND_LEVEL_APPROVER" = CLS."SECOND_LEVEL_APPROVER",
    				SDFC."THIRD_LEVEL_APPROVER" = CLS."THIRD_LEVEL_APPROVER",
    				SDFC."FOURTH_LEVEL_APPROVER" = CLS."FOURTH_LEVEL_APPROVER",
    				SDFC."SUBMITTED_ON" = CURRENT_DATE,
    				SDFC."CLAIM_STATUS" = :CLAIM_STATUS_VALUE;
    				
    				MERGE INTO "BENEFIT_SDFR_MASTER_CLAIM" SDFR
    				USING :LT_CLAIM_STATUS_INSERT AS CLS
    				ON SDFR."EMPLOYEE_ID"   = CLS."EMPLOYEE_ID"
					AND SDFR."CLAIM_REFERENCE"= CLS."CLAIM_REFERENCE"
    				WHEN MATCHED THEN UPDATE SET SDFR."FIRST_LEVEL_APPROVER" = CLS."FIRST_LEVEL_APPROVER",
    				SDFR."SECOND_LEVEL_APPROVER" = CLS."SECOND_LEVEL_APPROVER",
    				SDFR."THIRD_LEVEL_APPROVER" = CLS."THIRD_LEVEL_APPROVER",
    				SDFR."FOURTH_LEVEL_APPROVER" = CLS."FOURTH_LEVEL_APPROVER",
    				SDFR."SUBMITTED_ON" = CURRENT_DATE,
    				SDFR."CLAIM_STATUS" = :CLAIM_STATUS_VALUE;
    				
    				MERGE INTO "BENEFIT_CPC_MASTER_CLAIM" CPC
    				USING :LT_CLAIM_STATUS_INSERT AS CLS
    				ON CPC."EMPLOYEE_ID"   = CLS."EMPLOYEE_ID"
					AND CPC."CLAIM_REFERENCE"= CLS."CLAIM_REFERENCE"
    				WHEN MATCHED THEN UPDATE SET CPC."FIRST_LEVEL_APPROVER" = CLS."FIRST_LEVEL_APPROVER",
    				CPC."SECOND_LEVEL_APPROVER" = CLS."SECOND_LEVEL_APPROVER",
    				CPC."THIRD_LEVEL_APPROVER" = CLS."THIRD_LEVEL_APPROVER",
    				CPC."FOURTH_LEVEL_APPROVER" = CLS."FOURTH_LEVEL_APPROVER",
    				CPC."SUBMITTED_ON" = CURRENT_DATE,
    				CPC."CLAIM_STATUS" = :CLAIM_STATUS_VALUE;
    				
    				MERGE INTO "BENEFIT_OC_MASTER_CLAIM" OC
    				USING :LT_CLAIM_STATUS_INSERT AS CLS
    				ON OC."EMPLOYEE_ID"   = CLS."EMPLOYEE_ID"
					AND OC."CLAIM_REFERENCE"= CLS."CLAIM_REFERENCE"
    				WHEN MATCHED THEN UPDATE SET OC."FIRST_LEVEL_APPROVER" = CLS."FIRST_LEVEL_APPROVER",
    				OC."SECOND_LEVEL_APPROVER" = CLS."SECOND_LEVEL_APPROVER",
    				OC."THIRD_LEVEL_APPROVER" = CLS."THIRD_LEVEL_APPROVER",
    				OC."FOURTH_LEVEL_APPROVER" = CLS."FOURTH_LEVEL_APPROVER",
    				OC."SUBMITTED_ON" = CURRENT_DATE,
    				OC."CLAIM_STATUS" = :CLAIM_STATUS_VALUE;
    				
    				MERGE INTO "BENEFIT_PAY_UP_MASTER_CLAIM" PAY_UP
    				USING :LT_CLAIM_STATUS_INSERT AS CLS
    				ON PAY_UP."EMPLOYEE_ID"   = CLS."EMPLOYEE_ID"
					AND PAY_UP."CLAIM_REFERENCE"= CLS."CLAIM_REFERENCE"
    				WHEN MATCHED THEN UPDATE SET PAY_UP."FIRST_LEVEL_APPROVER" = CLS."FIRST_LEVEL_APPROVER",
    				PAY_UP."SECOND_LEVEL_APPROVER" = CLS."SECOND_LEVEL_APPROVER",
    				PAY_UP."THIRD_LEVEL_APPROVER" = CLS."THIRD_LEVEL_APPROVER",
    				PAY_UP."FOURTH_LEVEL_APPROVER" = CLS."FOURTH_LEVEL_APPROVER",
    				PAY_UP."SUBMITTED_ON" = CURRENT_DATE,
    				PAY_UP."CLAIM_STATUS" = :CLAIM_STATUS_VALUE;
    				

		LT_VAR_OUT :='s'; 
	
END