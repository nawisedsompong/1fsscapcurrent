PROCEDURE "proc_approve_claim"( out LT_VAR_OUT NVARCHAR(2),
out LT_POSTING_X  TABLE (
			"ESTIMATEPAYMENTDATE" DATE,
			"EMPLOYEE_ID" VARCHAR(100),
			"POSTING_AVAILABLE" VARCHAR(10),
			"CLAIM_REFERENCE" VARCHAR(50)
		),
IN LT_AP_CLAIM_TABLE "tt_approval_claim_type",
IN VAR_ARF VARCHAR(10),
IN APP_COMMENT VARCHAR(500)
)
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   --DEFAULT SCHEMA <default_schema_name>
 AS
BEGIN
		DECLARE IDX INT;
		DECLARE MAXIDX INT;
		DECLARE lv_index INT;
		DECLARE LT_EMP_ID VARCHAR(30);
		DECLARE lv_claimstatus VARCHAR(100);
		DECLARE EMPLOYEE_UPDATE VARCHAR(30);
		DECLARE YEAR_UPDATE VARCHAR(20);
		-- Fetch Claim Owner ID
		LT_EMP_ID = :LT_AP_CLAIM_TABLE.CLAIM_OWNER_ID[1];
		lv_claimstatus = :LT_AP_CLAIM_TABLE.CLAIM_STATUS[1];
		-- LT_DATE_VALUE= SELECT CURRENT_DATE FROM DUMMY;
		-- LT_CURRENT_DATE =:LT_DATE_VALUE.CURRENT_DATE[0];
		
		IF :lv_claimstatus = 'Approved' then
		-- Check if for the present date for an Employee we have the Posting Cut off Details-----
		LT_POSTING_CUTOFF_Y= SELECT * FROM "get_PaymentDate_Value"(:LT_AP_CLAIM_TABLE) WHERE "POSTING_AVAILABLE" = 'Y' ;
		LT_POSTING_CUTOFF_N= SELECT * FROM "get_PaymentDate_Value"(:LT_AP_CLAIM_TABLE) WHERE "POSTING_AVAILABLE" = 'X';
		---- end ----
		else 
			LT_POSTING_CUTOFF_Y = SELECT NULL as "ESTIMATEPAYMENTDATE" ,
  										 :LT_EMP_ID as "EMPLOYEE_ID",
										 '' as "POSTING_AVAILABLE",
										 "CLAIM_REFERENCE" 
										 FROM :LT_AP_CLAIM_TABLE;
		end if;
		
		LT_CLAIM_PROC_DATA = SELECT 
								CS."TOTAL_LEVEL",
								CS."CURRENT_LEVEL",
								CS."APPROVER1",
								CS."APPROVER2",
								CS."APPROVER3",
								CS."APPROVER4",
								CS."CLAIM_REFERENCE",
								CS."EMPLOYEE_ID",
								CS."STATUS",
								CS."REMARKS_EMPLOYEE",
    							CS."REMARKS_APPROVER1",
    							CS."REMARKS_APPROVER2",
    							CS."REMARKS_APPROVER3",
    							CS."REMARKS_APPROVER4",
    							CS."REMARKS_REJECTION",
    							CASE WHEN :VAR_ARF = 'R' THEN
    							CURRENT_DATE ELSE
    							CS."RESPONSE_DATE" END as "RESPONSE_DATE",
    							CS."FIRST_LEVEL_APPROVED_ON",
    							CS."SECOND_LEVEL_APPROVED_ON",
    							CS."THIRD_LEVEL_APPROVED_ON",
    							CS."FOURTH_LEVEL_APPROVED_ON",
								AP."CLAIM_OWNER_ID",
								AP."EMPLOYEE_ID" as CURRENT_APPROVER,
								AP."CATEGORY_CODE" as CATEGORY_CODE,
								CUT."ESTIMATEPAYMENTDATE"
							FROM  :LT_AP_CLAIM_TABLE AP
							INNER JOIN "BENEFIT_CLAIM_STATUS" CS
							ON AP."CLAIM_OWNER_ID"= CS."EMPLOYEE_ID" AND AP."CLAIM_REFERENCE"= CS."CLAIM_REFERENCE"
							INNER JOIN :LT_POSTING_CUTOFF_Y CUT
							ON CUT."EMPLOYEE_ID" = CS."EMPLOYEE_ID"
							AND CUT."CLAIM_REFERENCE"= CS."CLAIM_REFERENCE";
							
				FOR lv_index IN 1..record_count(:LT_CLAIM_PROC_DATA) DO
					   DECLARE vChar_Can VARCHAR(50);
					   DECLARE APPROVER_CURRENT VARCHAR(100);
				       DECLARE CLAIM_STATUS VARCHAR(100);
				       DECLARE ESTIMATE_PAYMENTDATE DATE;
				       DECLARE vStatusCheck VARCHAR(80);
				       DECLARE vCurrentDate Date;
				       ESTIMATE_PAYMENTDATE := '0000-00-00';
				       
				       vStatusCheck=:LT_CLAIM_PROC_DATA.STATUS[lv_index];
				       
				       SELECT substring(:vStatusCheck,1,12) into vChar_Can from DUMMY;
				       SELECT CURRENT_DATE into vCurrentDate from DUMMY;
					IF :LT_CLAIM_PROC_DATA.TOTAL_LEVEL[lv_index]>:LT_CLAIM_PROC_DATA.CURRENT_LEVEL[lv_index] and :VAR_ARF <> 'R' and :VAR_ARF <> 'C' THEN
					
				       IF :LT_CLAIM_PROC_DATA.CURRENT_LEVEL[lv_index] = '1' THEN
				          APPROVER_CURRENT=:LT_CLAIM_PROC_DATA.APPROVER2[lv_index];
				          --CLAIM_STATUS=CONCAT('Pending with Level 2 Approver', APPROVER_CURRENT);
				          IF :LT_CLAIM_PROC_DATA.STATUS[lv_index] = 'Cancellation Pending for approval, Level 1' THEN
				        		CLAIM_STATUS='Cancellation Pending for approval, Level 2';
				          ELSE
				        		CLAIM_STATUS='Pending for approval, Level 2';
				          END IF;
				          --approver one comments
				          :LT_CLAIM_PROC_DATA.(REMARKS_APPROVER1).UPDATE((:APP_COMMENT), lv_index);
				          :LT_CLAIM_PROC_DATA.(FIRST_LEVEL_APPROVED_ON).UPDATE((vCurrentDate), lv_index);
				          
					   ELSEIF :LT_CLAIM_PROC_DATA.CURRENT_LEVEL[lv_index] = '2' THEN
						  APPROVER_CURRENT=:LT_CLAIM_PROC_DATA.APPROVER3[lv_index];
						  --CLAIM_STATUS= CONCAT('Pending with Level 3 Approver', APPROVER_CURRENT) ;
						  
						  IF :LT_CLAIM_PROC_DATA.STATUS[lv_index] = 'Cancellation Pending for approval, Level 2' THEN
				        		CLAIM_STATUS='Cancellation Pending for approval, Level 3';
				          ELSE
				        		CLAIM_STATUS='Pending for approval, Level 3';
				          END IF;
						  --approver two comments
				          :LT_CLAIM_PROC_DATA.(REMARKS_APPROVER2).UPDATE((:APP_COMMENT), lv_index);
				          :LT_CLAIM_PROC_DATA.(SECOND_LEVEL_APPROVED_ON).UPDATE((vCurrentDate), lv_index);
					   
					   ELSEIF :LT_CLAIM_PROC_DATA.CURRENT_LEVEL[lv_index] = '3' THEN
						  APPROVER_CURRENT=:LT_CLAIM_PROC_DATA.APPROVER4[lv_index];
						  --CLAIM_STATUS= CONCAT('Pending with Level 3 Approver', APPROVER_CURRENT) ;
						  
						  IF :LT_CLAIM_PROC_DATA.STATUS[lv_index] = 'Cancellation Pending for approval, Level 3' THEN
				        		CLAIM_STATUS='Cancellation Pending for approval, Level 4';
				          ELSE
				        		CLAIM_STATUS='Pending for approval, Level 4';
				          END IF;
						  --approver two comments
				          :LT_CLAIM_PROC_DATA.(REMARKS_APPROVER3).UPDATE((:APP_COMMENT), lv_index);
				          :LT_CLAIM_PROC_DATA.(THIRD_LEVEL_APPROVED_ON).UPDATE((vCurrentDate), lv_index);
					   END IF;
					   
						:LT_CLAIM_PROC_DATA.(CURRENT_LEVEL).UPDATE((CAST((CAST(:LT_CLAIM_PROC_DATA.CURRENT_LEVEL[lv_index] as Integer)+ 1) AS VARCHAR)), lv_index);
						
					ELSEIF :VAR_ARF <> 'R' and :VAR_ARF <> 'C' THEN
						APPROVER_CURRENT=:LT_CLAIM_PROC_DATA.CURRENT_APPROVER[lv_index];
						
						 IF vChar_Can = 'Cancellation' THEN
				        	CLAIM_STATUS='Cancellation Approved';
				          	CALL "proc_cancel_approval_reject"(
													LT_AP_CLAIM_TABLE => :LT_AP_CLAIM_TABLE,
													VAR_ARF=> :VAR_ARF,
													APP_COMMENT=>:APP_COMMENT,
													-- LT_ON_BEH=>:LT_ON_BEH,
					                                LT_VAR_OUT => LT_VAR_OUT);
				          ELSE
				        		CLAIM_STATUS='Approved';
				        
				        ----YTD Report Status
				        		
				        		EMPLOYEE_UPDATE =:LT_CLAIM_PROC_DATA.CLAIM_OWNER_ID[lv_index];
								YEAR_UPDATE = EXTRACT(YEAR FROM CURRENT_DATE) ;
								
				        		UPSERT "CALCULATION_YTD_EMPLOYEE_CLAIM_STATUS" VALUES (:EMPLOYEE_UPDATE ,:YEAR_UPDATE ,'U') 
								WHERE "EMPLOYEE_ID" = :EMPLOYEE_UPDATE
								AND YEAR = :YEAR_UPDATE;
								
				          END IF;
						--approver Three comments
						IF :LT_CLAIM_PROC_DATA.CURRENT_LEVEL[lv_index] = '1' THEN
							:LT_CLAIM_PROC_DATA.(REMARKS_APPROVER1).UPDATE((:APP_COMMENT), lv_index);
							:LT_CLAIM_PROC_DATA.(FIRST_LEVEL_APPROVED_ON).UPDATE((vCurrentDate), lv_index);
						ELSEIF :LT_CLAIM_PROC_DATA.CURRENT_LEVEL[lv_index] = '2' THEN
							:LT_CLAIM_PROC_DATA.(REMARKS_APPROVER2).UPDATE((:APP_COMMENT), lv_index);
							:LT_CLAIM_PROC_DATA.(SECOND_LEVEL_APPROVED_ON).UPDATE((vCurrentDate), lv_index);
						ELSEIF :LT_CLAIM_PROC_DATA.CURRENT_LEVEL[lv_index] = '3' THEN
							:LT_CLAIM_PROC_DATA.(REMARKS_APPROVER3).UPDATE((:APP_COMMENT), lv_index);
							:LT_CLAIM_PROC_DATA.(THIRD_LEVEL_APPROVED_ON).UPDATE((vCurrentDate), lv_index);
						ELSE
							:LT_CLAIM_PROC_DATA.(REMARKS_APPROVER4).UPDATE((:APP_COMMENT), lv_index);
							:LT_CLAIM_PROC_DATA.(FOURTH_LEVEL_APPROVED_ON).UPDATE((vCurrentDate), lv_index);
						END IF;
						
						ESTIMATE_PAYMENTDATE =:LT_CLAIM_PROC_DATA.ESTIMATEPAYMENTDATE[lv_index];
				          
					ELSEIF :VAR_ARF = 'R' THEN
						APPROVER_CURRENT=:LT_CLAIM_PROC_DATA.CURRENT_APPROVER[lv_index];
						CLAIM_STATUS='Rejected';
						--approver rejected comments
				          :LT_CLAIM_PROC_DATA.(REMARKS_REJECTION).UPDATE((:APP_COMMENT), lv_index);
				        IF :LT_CLAIM_PROC_DATA.CURRENT_LEVEL[lv_index] = '1' THEN
							:LT_CLAIM_PROC_DATA.(REMARKS_APPROVER1).UPDATE((:APP_COMMENT), lv_index);
							:LT_CLAIM_PROC_DATA.(FIRST_LEVEL_APPROVED_ON).UPDATE((vCurrentDate), lv_index);
						ELSEIF :LT_CLAIM_PROC_DATA.CURRENT_LEVEL[lv_index] = '2' THEN
							:LT_CLAIM_PROC_DATA.(REMARKS_APPROVER2).UPDATE((:APP_COMMENT), lv_index);
							:LT_CLAIM_PROC_DATA.(SECOND_LEVEL_APPROVED_ON).UPDATE((vCurrentDate), lv_index);
						ELSEIF :LT_CLAIM_PROC_DATA.CURRENT_LEVEL[lv_index] = '3' THEN
							:LT_CLAIM_PROC_DATA.(REMARKS_APPROVER3).UPDATE((:APP_COMMENT), lv_index);
							:LT_CLAIM_PROC_DATA.(THIRD_LEVEL_APPROVED_ON).UPDATE((vCurrentDate), lv_index);
						ELSE
							:LT_CLAIM_PROC_DATA.(REMARKS_APPROVER4).UPDATE((:APP_COMMENT), lv_index);
							:LT_CLAIM_PROC_DATA.(FOURTH_LEVEL_APPROVED_ON).UPDATE((vCurrentDate), lv_index);
						END IF;
						 IF vChar_Can = 'Cancellation' THEN
				          	CALL "proc_cancel_approval_reject"(
													LT_AP_CLAIM_TABLE => :LT_AP_CLAIM_TABLE,
													VAR_ARF=> :VAR_ARF,
													APP_COMMENT=>:APP_COMMENT,
													-- LT_ON_BEH=>:LT_ON_BEH,
					                                LT_VAR_OUT => LT_VAR_OUT);
					                                
					     END IF;
					     
				    ELSEIF :VAR_ARF = 'C' THEN
				    	APPROVER_CURRENT=:LT_CLAIM_PROC_DATA.CURRENT_APPROVER[lv_index];
						CLAIM_STATUS='Cancelled';
						--approver cancelled comments
				          :LT_CLAIM_PROC_DATA.(REMARKS_REJECTION).UPDATE((:APP_COMMENT), lv_index);
				          IF vChar_Can = 'Cancellation' THEN
				          	CALL "proc_cancel_approval_reject"(
													LT_AP_CLAIM_TABLE => :LT_AP_CLAIM_TABLE,
													VAR_ARF=> :VAR_ARF,
													APP_COMMENT=>:APP_COMMENT,
													-- LT_ON_BEH=>:LT_ON_BEH,
					                                LT_VAR_OUT => LT_VAR_OUT);
					                                
					     END IF;
					END IF;
					
					:LT_CLAIM_PROC_DATA.(CURRENT_APPROVER).UPDATE((:APPROVER_CURRENT), lv_index);
					:LT_CLAIM_PROC_DATA.(STATUS).UPDATE((:CLAIM_STATUS), lv_index);
					:LT_CLAIM_PROC_DATA.(ESTIMATEPAYMENTDATE).UPDATE((:ESTIMATE_PAYMENTDATE), lv_index);
					
					
					-- IF :LT_CLAIM_PROC_DATA.CATEGORY_CODE[lv_index] = 'MC' THEN
					-- 	UPDATE "BENEFIT_MEDICAL_CLAIM" SET "CLAIM_STATUS" = :CLAIM_STATUS WHERE "EMPLOYEE_ID"= :LT_CLAIM_PROC_DATA.Claim_Owner_id[lv_index];
					-- ELSEIF :LT_CLAIM_PROC_DATA.CATEGORY_CODE[lv_index] = 'WRC' THEN
					-- 	UPDATE "BENEFIT_WRC_MASTER_CLAIM" SET "CLAIM_STATUS" = :CLAIM_STATUS WHERE "EMPLOYEE_ID"= :LT_CLAIM_PROC_DATA.Claim_Owner_id[lv_index];
					-- END IF;
				END FOR;
					                                
					MERGE INTO "BENEFIT_CLAIM_STATUS" CLS
    				USING :LT_CLAIM_PROC_DATA AS CLSE
    				ON CLSE."CLAIM_OWNER_ID"   = CLS."EMPLOYEE_ID"
					AND CLSE."CLAIM_REFERENCE"= CLS."CLAIM_REFERENCE"
    				WHEN MATCHED THEN UPDATE SET CLS."CURRENT_LEVEL" = CLSE."CURRENT_LEVEL",
    				CLS."STATUS" = CLSE."STATUS",
    				CLS."REMARKS_APPROVER1" = CLSE."REMARKS_APPROVER1",
    				CLS."REMARKS_APPROVER2" = CLSE."REMARKS_APPROVER2",
    				CLS."REMARKS_APPROVER3" = CLSE."REMARKS_APPROVER3",
    				CLS."REMARKS_APPROVER4" = CLSE."REMARKS_APPROVER4",
    				CLS."REMARKS_REJECTION" = CLSE."REMARKS_REJECTION",
    				CLS."REMARKS_EMPLOYEE"  = CLSE."REMARKS_EMPLOYEE",
    				CLS."RESPONSE_DATE"    =  CLSE."RESPONSE_DATE",
    				CLS."FIRST_LEVEL_APPROVED_ON"  = CLSE."FIRST_LEVEL_APPROVED_ON",
    				CLS."SECOND_LEVEL_APPROVED_ON"  = CLSE."SECOND_LEVEL_APPROVED_ON",
    				CLS."THIRD_LEVEL_APPROVED_ON"  = CLSE."THIRD_LEVEL_APPROVED_ON",
    				CLS."FOURTH_LEVEL_APPROVED_ON"  = CLSE."FOURTH_LEVEL_APPROVED_ON";
    				
    				MERGE INTO "BENEFIT_APPROVAL" APPROVAL
    				USING :LT_CLAIM_PROC_DATA AS CLSE
    				ON CLSE."CLAIM_OWNER_ID"   = APPROVAL."CLAIM_OWNER_ID"
					AND CLSE."CLAIM_REFERENCE"= APPROVAL."CLAIM_REFERENCE"
    				WHEN MATCHED THEN UPDATE SET APPROVAL."EMPLOYEE_ID" = CLSE."CURRENT_APPROVER",
    				APPROVAL."EMPLOYEE_NAME" = CLSE."CURRENT_APPROVER",
    				APPROVAL."CLAIM_STATUS" = CLSE."STATUS";
    				-- APPROVAL."ESTIMATEPAYMENTDATE" =CLSE."ESTIMATEPAYMENTDATE" ;
    				
    			-------------------------------------	
    			------ UPDATE DIFFERENT CLAIM TABLE-------------
    			-----------------------------------------
    		
    				---Medical Claim
	    			MERGE INTO "BENEFIT_MEDICAL_CLAIM" MC  
    				USING :LT_CLAIM_PROC_DATA AS CLSE
    				ON CLSE."CLAIM_OWNER_ID"   = MC."EMPLOYEE_ID"
					AND CLSE."CLAIM_REFERENCE"= MC."CLAIM_REFERENCE"
					AND CLSE."CATEGORY_CODE"='MC'
    				WHEN MATCHED THEN UPDATE SET MC."CLAIM_STATUS" = CLSE."STATUS",
    				MC."REMARKS_APPROVER1" = CLSE."REMARKS_APPROVER1",
    				MC."REMARKS_APPROVER2" = CLSE."REMARKS_APPROVER2",
    				MC."REMARKS_APPROVER3" = CLSE."REMARKS_APPROVER3",
    				MC."REMARKS_REJECTION" = CLSE."REMARKS_REJECTION",
    				MC."REMARKS_EMPLOYEE"  = CLSE."REMARKS_EMPLOYEE",
    				MC."FIRST_LEVEL_APPROVED_ON"  = CLSE."FIRST_LEVEL_APPROVED_ON",
    				MC."SECOND_LEVEL_APPROVED_ON"  = CLSE."SECOND_LEVEL_APPROVED_ON",
    				MC."THIRD_LEVEL_APPROVED_ON"  = CLSE."THIRD_LEVEL_APPROVED_ON";
    				
    				---Clinical Placement Request
    				
    				MERGE INTO "BENEFIT_CPR_CLAIM" CPR  
    				USING :LT_CLAIM_PROC_DATA AS CLSE
    				ON CLSE."CLAIM_OWNER_ID"   = CPR."EMPLOYEE_ID"
					AND CLSE."CLAIM_REFERENCE"= CPR."CLAIM_REFERENCE"
					AND CLSE."CATEGORY_CODE"='CPR'
    				WHEN MATCHED THEN UPDATE SET CPR."CLAIM_STATUS" = CLSE."STATUS",
    				CPR."REMARKS_APPROVER1" = CLSE."REMARKS_APPROVER1",
    				CPR."REMARKS_APPROVER2" = CLSE."REMARKS_APPROVER2",
    				CPR."REMARKS_APPROVER3" = CLSE."REMARKS_APPROVER3",
    				CPR."REMARKS_REJECTION" = CLSE."REMARKS_REJECTION",
    				CPR."REMARKS_EMPLOYEE"  = CLSE."REMARKS_EMPLOYEE",
    				CPR."FIRST_LEVEL_APPROVED_ON"  = CLSE."FIRST_LEVEL_APPROVED_ON",
    				CPR."SECOND_LEVEL_APPROVED_ON"  = CLSE."SECOND_LEVEL_APPROVED_ON",
    				CPR."THIRD_LEVEL_APPROVED_ON"  = CLSE."THIRD_LEVEL_APPROVED_ON";
    				
    				
    				---OverTime Claim
    				MERGE INTO "BENEFIT_OVERTIME_CLAIM" OVC 
    				USING :LT_CLAIM_PROC_DATA AS CLSE
    				ON CLSE."CLAIM_OWNER_ID"   = OVC."EMPLOYEE_ID"
					AND CLSE."CLAIM_REFERENCE"= OVC."CLAIM_REFERENCE"
					AND CLSE."CATEGORY_CODE"='TIM'
    				WHEN MATCHED THEN UPDATE SET OVC."CLAIM_STATUS" = CLSE."STATUS",
    				OVC."REMARKS_APPROVER1" = CLSE."REMARKS_APPROVER1",
    				OVC."REMARKS_APPROVER2" = CLSE."REMARKS_APPROVER2",
    				OVC."REMARKS_APPROVER3" = CLSE."REMARKS_APPROVER3",
    				OVC."REMARKS_REJECTION" = CLSE."REMARKS_REJECTION",
    				OVC."REMARKS_EMPLOYEE"  = CLSE."REMARKS_EMPLOYEE",
    				OVC."FIRST_LEVEL_APPROVED_ON"  = CLSE."FIRST_LEVEL_APPROVED_ON",
    				OVC."SECOND_LEVEL_APPROVED_ON"  = CLSE."SECOND_LEVEL_APPROVED_ON",
    				OVC."THIRD_LEVEL_APPROVED_ON"  = CLSE."THIRD_LEVEL_APPROVED_ON";
    				
    				---Work Related Claim
    				MERGE INTO "BENEFIT_WRC_MASTER_CLAIM" WRC  
    				USING :LT_CLAIM_PROC_DATA AS CLSE
    				ON CLSE."CLAIM_OWNER_ID"   = WRC."EMPLOYEE_ID"
					AND CLSE."CLAIM_REFERENCE"= WRC."CLAIM_REFERENCE"
					AND CLSE."CATEGORY_CODE"='WRC'
    				WHEN MATCHED THEN UPDATE SET WRC."CLAIM_STATUS" = CLSE."STATUS",
    				WRC."REMARKS_APPROVER1" = CLSE."REMARKS_APPROVER1",
    				WRC."REMARKS_APPROVER2" = CLSE."REMARKS_APPROVER2",
    				WRC."REMARKS_APPROVER3" = CLSE."REMARKS_APPROVER3",
    				WRC."REMARKS_REJECTION" = CLSE."REMARKS_REJECTION",
    				WRC."REMARKS_EMPLOYEE"  = CLSE."REMARKS_EMPLOYEE",
    				WRC."FIRST_LEVEL_APPROVED_ON"  = CLSE."FIRST_LEVEL_APPROVED_ON",
    				WRC."SECOND_LEVEL_APPROVED_ON"  = CLSE."SECOND_LEVEL_APPROVED_ON",
    				WRC."THIRD_LEVEL_APPROVED_ON"  = CLSE."THIRD_LEVEL_APPROVED_ON";
    				
    				--Work Related HR Claim
    				MERGE INTO "BENEFIT_WRC_HR_MASTER_CLAIM" WRC  
    				USING :LT_CLAIM_PROC_DATA AS CLSE
    				ON CLSE."CLAIM_OWNER_ID"   = WRC."EMPLOYEE_ID"
					AND CLSE."CLAIM_REFERENCE"= WRC."CLAIM_REFERENCE"
					AND CLSE."CATEGORY_CODE"='WRC_HR'
    				WHEN MATCHED THEN UPDATE SET WRC."CLAIM_STATUS" = CLSE."STATUS",
    				WRC."REMARKS_APPROVER1" = CLSE."REMARKS_APPROVER1",
    				WRC."REMARKS_APPROVER2" = CLSE."REMARKS_APPROVER2",
    				WRC."REMARKS_APPROVER3" = CLSE."REMARKS_APPROVER3",
    				WRC."REMARKS_APPROVER4" = CLSE."REMARKS_APPROVER4",
    				WRC."REMARKS_REJECTION" = CLSE."REMARKS_REJECTION",
    				WRC."REMARKS_EMPLOYEE"  = CLSE."REMARKS_EMPLOYEE",
    				WRC."FIRST_LEVEL_APPROVED_ON"  = CLSE."FIRST_LEVEL_APPROVED_ON",
    				WRC."SECOND_LEVEL_APPROVED_ON"  = CLSE."SECOND_LEVEL_APPROVED_ON",
    				WRC."THIRD_LEVEL_APPROVED_ON"  = CLSE."THIRD_LEVEL_APPROVED_ON",
    				WRC."FOURTH_LEVEL_APPROVED_ON"  = CLSE."FOURTH_LEVEL_APPROVED_ON";
    				
    				
    				MERGE INTO "BENEFIT_AHP_LIC_MS_WIC_CLAIM" WRC  
    				USING :LT_CLAIM_PROC_DATA AS CLSE
    				ON CLSE."CLAIM_OWNER_ID"   = WRC."EMPLOYEE_ID"
					AND CLSE."CLAIM_REFERENCE"= WRC."CLAIM_REFERENCE"
					AND (CLSE."CATEGORY_CODE"='AHP'
					OR CLSE."CATEGORY_CODE"='WIC'
					OR CLSE."CATEGORY_CODE"='LIC'
					OR CLSE."CATEGORY_CODE"='MSR')
    				WHEN MATCHED THEN UPDATE SET WRC."CLAIM_STATUS" = CLSE."STATUS",
    				WRC."REMARKS_APPROVER1" = CLSE."REMARKS_APPROVER1",
    				WRC."REMARKS_APPROVER2" = CLSE."REMARKS_APPROVER2",
    				WRC."REMARKS_APPROVER3" = CLSE."REMARKS_APPROVER3",
    				WRC."REMARKS_REJECTION" = CLSE."REMARKS_REJECTION",
    				WRC."REMARKS_EMPLOYEE"  = CLSE."REMARKS_EMPLOYEE",
    				WRC."FIRST_LEVEL_APPROVED_ON"  = CLSE."FIRST_LEVEL_APPROVED_ON",
    				WRC."SECOND_LEVEL_APPROVED_ON"  = CLSE."SECOND_LEVEL_APPROVED_ON",
    				WRC."THIRD_LEVEL_APPROVED_ON"  = CLSE."THIRD_LEVEL_APPROVED_ON";
    				
    				
    				MERGE INTO "BENEFIT_SP_MASTER_CLAIM" WRC  
    				USING :LT_CLAIM_PROC_DATA AS CLSE
    				ON CLSE."CLAIM_OWNER_ID"   = WRC."EMPLOYEE_ID"
					AND CLSE."CLAIM_REFERENCE"= WRC."CLAIM_REFERENCE"
					AND CLSE."CATEGORY_CODE"='SP'
    				WHEN MATCHED THEN UPDATE SET WRC."CLAIM_STATUS" = CLSE."STATUS",
    				WRC."REMARKS_APPROVER1" = CLSE."REMARKS_APPROVER1",
    				WRC."REMARKS_APPROVER2" = CLSE."REMARKS_APPROVER2",
    				WRC."REMARKS_APPROVER3" = CLSE."REMARKS_APPROVER3",
    				WRC."REMARKS_REJECTION" = CLSE."REMARKS_REJECTION",
    				WRC."REMARKS_EMPLOYEE"  = CLSE."REMARKS_EMPLOYEE",
    				WRC."FIRST_LEVEL_APPROVED_ON"  = CLSE."FIRST_LEVEL_APPROVED_ON",
    				WRC."SECOND_LEVEL_APPROVED_ON"  = CLSE."SECOND_LEVEL_APPROVED_ON",
    				WRC."THIRD_LEVEL_APPROVED_ON"  = CLSE."THIRD_LEVEL_APPROVED_ON";
    				
                    MERGE INTO "BENEFIT_SP1_MASTER_CLAIM" WRC  
    				USING :LT_CLAIM_PROC_DATA AS CLSE
    				ON CLSE."CLAIM_OWNER_ID"   = WRC."EMPLOYEE_ID"
					AND CLSE."CLAIM_REFERENCE"= WRC."CLAIM_REFERENCE"
					AND CLSE."CATEGORY_CODE"='SP1'
    				WHEN MATCHED THEN UPDATE SET WRC."CLAIM_STATUS" = CLSE."STATUS",
    				WRC."REMARKS_APPROVER1" = CLSE."REMARKS_APPROVER1",
    				WRC."REMARKS_APPROVER2" = CLSE."REMARKS_APPROVER2",
    				WRC."REMARKS_APPROVER3" = CLSE."REMARKS_APPROVER3",
    				WRC."REMARKS_REJECTION" = CLSE."REMARKS_REJECTION",
    				WRC."REMARKS_EMPLOYEE"  = CLSE."REMARKS_EMPLOYEE",
    				WRC."FIRST_LEVEL_APPROVED_ON"  = CLSE."FIRST_LEVEL_APPROVED_ON",
    				WRC."SECOND_LEVEL_APPROVED_ON"  = CLSE."SECOND_LEVEL_APPROVED_ON",
    				WRC."THIRD_LEVEL_APPROVED_ON"  = CLSE."THIRD_LEVEL_APPROVED_ON";

                    MERGE INTO "BENEFIT_SP2_MASTER_CLAIM" WRC  
    				USING :LT_CLAIM_PROC_DATA AS CLSE
    				ON CLSE."CLAIM_OWNER_ID"   = WRC."EMPLOYEE_ID"
					AND CLSE."CLAIM_REFERENCE"= WRC."CLAIM_REFERENCE"
					AND CLSE."CATEGORY_CODE"='SP2'
    				WHEN MATCHED THEN UPDATE SET WRC."CLAIM_STATUS" = CLSE."STATUS",
    				WRC."REMARKS_APPROVER1" = CLSE."REMARKS_APPROVER1",
    				WRC."REMARKS_APPROVER2" = CLSE."REMARKS_APPROVER2",
    				WRC."REMARKS_APPROVER3" = CLSE."REMARKS_APPROVER3",
    				WRC."REMARKS_REJECTION" = CLSE."REMARKS_REJECTION",
    				WRC."REMARKS_EMPLOYEE"  = CLSE."REMARKS_EMPLOYEE",
    				WRC."FIRST_LEVEL_APPROVED_ON"  = CLSE."FIRST_LEVEL_APPROVED_ON",
    				WRC."SECOND_LEVEL_APPROVED_ON"  = CLSE."SECOND_LEVEL_APPROVED_ON",
    				WRC."THIRD_LEVEL_APPROVED_ON"  = CLSE."THIRD_LEVEL_APPROVED_ON";

                    MERGE INTO "BENEFIT_SP3_MASTER_CLAIM" WRC  
    				USING :LT_CLAIM_PROC_DATA AS CLSE
    				ON CLSE."CLAIM_OWNER_ID"   = WRC."EMPLOYEE_ID"
					AND CLSE."CLAIM_REFERENCE"= WRC."CLAIM_REFERENCE"
					AND CLSE."CATEGORY_CODE"='SP3'
    				WHEN MATCHED THEN UPDATE SET WRC."CLAIM_STATUS" = CLSE."STATUS",
    				WRC."REMARKS_APPROVER1" = CLSE."REMARKS_APPROVER1",
    				WRC."REMARKS_APPROVER2" = CLSE."REMARKS_APPROVER2",
    				WRC."REMARKS_APPROVER3" = CLSE."REMARKS_APPROVER3",
    				WRC."REMARKS_REJECTION" = CLSE."REMARKS_REJECTION",
    				WRC."REMARKS_EMPLOYEE"  = CLSE."REMARKS_EMPLOYEE",
    				WRC."FIRST_LEVEL_APPROVED_ON"  = CLSE."FIRST_LEVEL_APPROVED_ON",
    				WRC."SECOND_LEVEL_APPROVED_ON"  = CLSE."SECOND_LEVEL_APPROVED_ON",
    				WRC."THIRD_LEVEL_APPROVED_ON"  = CLSE."THIRD_LEVEL_APPROVED_ON";
    				
    				MERGE INTO "BENEFIT_PTF_ACL_BCL_CLAIM" WRC  
    				USING :LT_CLAIM_PROC_DATA AS CLSE
    				ON CLSE."CLAIM_OWNER_ID"   = WRC."EMPLOYEE_ID"
					AND CLSE."CLAIM_REFERENCE"= WRC."CLAIM_REFERENCE"
					AND (CLSE."CATEGORY_CODE"='PTF'
					OR CLSE."CATEGORY_CODE"='CLS')
    				WHEN MATCHED THEN UPDATE SET WRC."CLAIM_STATUS" = CLSE."STATUS",
    				WRC."REMARKS_APPROVER1" = CLSE."REMARKS_APPROVER1",
    				WRC."REMARKS_APPROVER2" = CLSE."REMARKS_APPROVER2",
    				WRC."REMARKS_APPROVER3" = CLSE."REMARKS_APPROVER3",
    				WRC."REMARKS_REJECTION" = CLSE."REMARKS_REJECTION",
    				WRC."REMARKS_EMPLOYEE"  = CLSE."REMARKS_EMPLOYEE",
    				WRC."FIRST_LEVEL_APPROVED_ON"  = CLSE."FIRST_LEVEL_APPROVED_ON",
    				WRC."SECOND_LEVEL_APPROVED_ON"  = CLSE."SECOND_LEVEL_APPROVED_ON",
    				WRC."THIRD_LEVEL_APPROVED_ON"  = CLSE."THIRD_LEVEL_APPROVED_ON";
    				
    				MERGE INTO "BENEFIT_PC_CLAIM" WRC  
    				USING :LT_CLAIM_PROC_DATA AS CLSE
    				ON CLSE."CLAIM_OWNER_ID"   = WRC."EMPLOYEE_ID"
					AND CLSE."CLAIM_REFERENCE"= WRC."CLAIM_REFERENCE"
					AND CLSE."CATEGORY_CODE"='PC'
    				WHEN MATCHED THEN UPDATE SET WRC."CLAIM_STATUS" = CLSE."STATUS",
    				WRC."REMARKS_APPROVER1" = CLSE."REMARKS_APPROVER1",
    				WRC."REMARKS_APPROVER2" = CLSE."REMARKS_APPROVER2",
    				WRC."REMARKS_APPROVER3" = CLSE."REMARKS_APPROVER3",
    				WRC."REMARKS_REJECTION" = CLSE."REMARKS_REJECTION",
    				WRC."REMARKS_EMPLOYEE"  = CLSE."REMARKS_EMPLOYEE",
    				WRC."FIRST_LEVEL_APPROVED_ON"  = CLSE."FIRST_LEVEL_APPROVED_ON",
    				WRC."SECOND_LEVEL_APPROVED_ON"  = CLSE."SECOND_LEVEL_APPROVED_ON",
    				WRC."THIRD_LEVEL_APPROVED_ON"  = CLSE."THIRD_LEVEL_APPROVED_ON";    				
    				
    				MERGE INTO "BENEFIT_COV_MASTER_CLAIM" WRC  
    				USING :LT_CLAIM_PROC_DATA AS CLSE
    				ON CLSE."CLAIM_OWNER_ID"   = WRC."EMPLOYEE_ID"
					AND CLSE."CLAIM_REFERENCE"= WRC."CLAIM_REFERENCE"
					AND CLSE."CATEGORY_CODE"='COV'
    				WHEN MATCHED THEN UPDATE SET WRC."CLAIM_STATUS" = CLSE."STATUS",
    				WRC."REMARKS_APPROVER1" = CLSE."REMARKS_APPROVER1",
    				WRC."REMARKS_APPROVER2" = CLSE."REMARKS_APPROVER2",
    				WRC."REMARKS_APPROVER3" = CLSE."REMARKS_APPROVER3",
    				WRC."REMARKS_REJECTION" = CLSE."REMARKS_REJECTION",
    				WRC."REMARKS_EMPLOYEE"  = CLSE."REMARKS_EMPLOYEE",
    				WRC."FIRST_LEVEL_APPROVED_ON"  = CLSE."FIRST_LEVEL_APPROVED_ON",
    				WRC."SECOND_LEVEL_APPROVED_ON"  = CLSE."SECOND_LEVEL_APPROVED_ON",
    				WRC."THIRD_LEVEL_APPROVED_ON"  = CLSE."THIRD_LEVEL_APPROVED_ON";  				
    				
    				MERGE INTO "BENEFIT_TC_MASTER_CLAIM" WRC  
    				USING :LT_CLAIM_PROC_DATA AS CLSE
    				ON CLSE."CLAIM_OWNER_ID"   = WRC."EMPLOYEE_ID"
					AND CLSE."CLAIM_REFERENCE"= WRC."CLAIM_REFERENCE"
					AND CLSE."CATEGORY_CODE"='TC'
    				WHEN MATCHED THEN UPDATE SET WRC."CLAIM_STATUS" = CLSE."STATUS",
    				WRC."REMARKS_APPROVER1" = CLSE."REMARKS_APPROVER1",
    				WRC."REMARKS_APPROVER2" = CLSE."REMARKS_APPROVER2",
    				WRC."REMARKS_APPROVER3" = CLSE."REMARKS_APPROVER3",
    				WRC."REMARKS_REJECTION" = CLSE."REMARKS_REJECTION",
    				WRC."REMARKS_EMPLOYEE"  = CLSE."REMARKS_EMPLOYEE",
    				WRC."FIRST_LEVEL_APPROVED_ON"  = CLSE."FIRST_LEVEL_APPROVED_ON",
    				WRC."SECOND_LEVEL_APPROVED_ON"  = CLSE."SECOND_LEVEL_APPROVED_ON",
    				WRC."THIRD_LEVEL_APPROVED_ON"  = CLSE."THIRD_LEVEL_APPROVED_ON";  
    				
    				MERGE INTO "BENEFIT_SDFC_MASTER_CLAIM" SDFC  
    				USING :LT_CLAIM_PROC_DATA AS CLSE
    				ON CLSE."CLAIM_OWNER_ID"   = SDFC."EMPLOYEE_ID"
					AND CLSE."CLAIM_REFERENCE"= SDFC."CLAIM_REFERENCE"
					AND CLSE."CATEGORY_CODE"='SDFC'
    				WHEN MATCHED THEN UPDATE SET SDFC."CLAIM_STATUS" = CLSE."STATUS",
    				SDFC."REMARKS_APPROVER1" = CLSE."REMARKS_APPROVER1",
    				SDFC."REMARKS_APPROVER2" = CLSE."REMARKS_APPROVER2",
    				SDFC."REMARKS_APPROVER3" = CLSE."REMARKS_APPROVER3",
    				SDFC."REMARKS_APPROVER4" = CLSE."REMARKS_APPROVER4",
    				SDFC."REMARKS_REJECTION" = CLSE."REMARKS_REJECTION",
    				SDFC."REMARKS_EMPLOYEE"  = CLSE."REMARKS_EMPLOYEE",
    				SDFC."FIRST_LEVEL_APPROVED_ON"  = CLSE."FIRST_LEVEL_APPROVED_ON",
    				SDFC."SECOND_LEVEL_APPROVED_ON"  = CLSE."SECOND_LEVEL_APPROVED_ON",
    				SDFC."THIRD_LEVEL_APPROVED_ON"  = CLSE."THIRD_LEVEL_APPROVED_ON",
    				SDFC."FOURTH_LEVEL_APPROVED_ON"  = CLSE."FOURTH_LEVEL_APPROVED_ON";
    				
    				MERGE INTO "BENEFIT_SDFR_MASTER_CLAIM" SDFR  
    				USING :LT_CLAIM_PROC_DATA AS CLSE
    				ON CLSE."CLAIM_OWNER_ID"   = SDFR."EMPLOYEE_ID"
					AND CLSE."CLAIM_REFERENCE"= SDFR."CLAIM_REFERENCE"
					AND CLSE."CATEGORY_CODE"='SDFR'
    				WHEN MATCHED THEN UPDATE SET SDFR."CLAIM_STATUS" = CLSE."STATUS",
    				SDFR."REMARKS_APPROVER1" = CLSE."REMARKS_APPROVER1",
    				SDFR."REMARKS_APPROVER2" = CLSE."REMARKS_APPROVER2",
    				SDFR."REMARKS_APPROVER3" = CLSE."REMARKS_APPROVER3",
    				SDFR."REMARKS_APPROVER4" = CLSE."REMARKS_APPROVER4",
    				SDFR."REMARKS_REJECTION" = CLSE."REMARKS_REJECTION",
    				SDFR."REMARKS_EMPLOYEE"  = CLSE."REMARKS_EMPLOYEE",
    				SDFR."FIRST_LEVEL_APPROVED_ON"  = CLSE."FIRST_LEVEL_APPROVED_ON",
    				SDFR."SECOND_LEVEL_APPROVED_ON"  = CLSE."SECOND_LEVEL_APPROVED_ON",
    				SDFR."THIRD_LEVEL_APPROVED_ON"  = CLSE."THIRD_LEVEL_APPROVED_ON",
    				SDFR."FOURTH_LEVEL_APPROVED_ON"  = CLSE."FOURTH_LEVEL_APPROVED_ON";
    				
    				MERGE INTO "BENEFIT_CPC_MASTER_CLAIM" CPC  
    				USING :LT_CLAIM_PROC_DATA AS CLSE
    				ON CLSE."CLAIM_OWNER_ID"   = CPC."EMPLOYEE_ID"
					AND CLSE."CLAIM_REFERENCE"= CPC."CLAIM_REFERENCE"
					AND CLSE."CATEGORY_CODE"='CPC'
    				WHEN MATCHED THEN UPDATE SET CPC."CLAIM_STATUS" = CLSE."STATUS",
    				CPC."REMARKS_APPROVER1" = CLSE."REMARKS_APPROVER1",
    				CPC."REMARKS_APPROVER2" = CLSE."REMARKS_APPROVER2",
    				CPC."REMARKS_APPROVER3" = CLSE."REMARKS_APPROVER3",
    				CPC."REMARKS_APPROVER4" = CLSE."REMARKS_APPROVER4",
    				CPC."REMARKS_REJECTION" = CLSE."REMARKS_REJECTION",
    				CPC."REMARKS_EMPLOYEE"  = CLSE."REMARKS_EMPLOYEE",
    				CPC."FIRST_LEVEL_APPROVED_ON"  = CLSE."FIRST_LEVEL_APPROVED_ON",
    				CPC."SECOND_LEVEL_APPROVED_ON"  = CLSE."SECOND_LEVEL_APPROVED_ON",
    				CPC."THIRD_LEVEL_APPROVED_ON"  = CLSE."THIRD_LEVEL_APPROVED_ON",
    				CPC."FOURTH_LEVEL_APPROVED_ON"  = CLSE."FOURTH_LEVEL_APPROVED_ON";
    				
    				MERGE INTO "BENEFIT_OC_MASTER_CLAIM" OC  
    				USING :LT_CLAIM_PROC_DATA AS CLSE
    				ON CLSE."CLAIM_OWNER_ID"   = OC."EMPLOYEE_ID"
					AND CLSE."CLAIM_REFERENCE"= OC."CLAIM_REFERENCE"
					AND CLSE."CATEGORY_CODE"='OC'
    				WHEN MATCHED THEN UPDATE SET OC."CLAIM_STATUS" = CLSE."STATUS",
    				OC."REMARKS_APPROVER1" = CLSE."REMARKS_APPROVER1",
    				OC."REMARKS_APPROVER2" = CLSE."REMARKS_APPROVER2",
    				OC."REMARKS_APPROVER3" = CLSE."REMARKS_APPROVER3",
    				OC."REMARKS_APPROVER4" = CLSE."REMARKS_APPROVER4",
    				OC."REMARKS_REJECTION" = CLSE."REMARKS_REJECTION",
    				OC."REMARKS_EMPLOYEE"  = CLSE."REMARKS_EMPLOYEE",
    				OC."FIRST_LEVEL_APPROVED_ON"  = CLSE."FIRST_LEVEL_APPROVED_ON",
    				OC."SECOND_LEVEL_APPROVED_ON"  = CLSE."SECOND_LEVEL_APPROVED_ON",
    				OC."THIRD_LEVEL_APPROVED_ON"  = CLSE."THIRD_LEVEL_APPROVED_ON",
    				OC."FOURTH_LEVEL_APPROVED_ON"  = CLSE."FOURTH_LEVEL_APPROVED_ON";
    				
    				MERGE INTO "BENEFIT_PAY_UP_MASTER_CLAIM" PAY_UP  
    				USING :LT_CLAIM_PROC_DATA AS CLSE
    				ON CLSE."CLAIM_OWNER_ID"   = PAY_UP."EMPLOYEE_ID"
					AND CLSE."CLAIM_REFERENCE"= PAY_UP."CLAIM_REFERENCE"
					AND CLSE."CATEGORY_CODE"='PAY_UP'
    				WHEN MATCHED THEN UPDATE SET PAY_UP."CLAIM_STATUS" = CLSE."STATUS",
    				PAY_UP."REMARKS_APPROVER1" = CLSE."REMARKS_APPROVER1",
    				PAY_UP."REMARKS_APPROVER2" = CLSE."REMARKS_APPROVER2",
    				PAY_UP."REMARKS_APPROVER3" = CLSE."REMARKS_APPROVER3",
    				PAY_UP."REMARKS_APPROVER4" = CLSE."REMARKS_APPROVER4",
    				PAY_UP."REMARKS_REJECTION" = CLSE."REMARKS_REJECTION",
    				PAY_UP."REMARKS_EMPLOYEE"  = CLSE."REMARKS_EMPLOYEE",
    				PAY_UP."FIRST_LEVEL_APPROVED_ON"  = CLSE."FIRST_LEVEL_APPROVED_ON",
    				PAY_UP."SECOND_LEVEL_APPROVED_ON"  = CLSE."SECOND_LEVEL_APPROVED_ON",
    				PAY_UP."THIRD_LEVEL_APPROVED_ON"  = CLSE."THIRD_LEVEL_APPROVED_ON",
    				PAY_UP."FOURTH_LEVEL_APPROVED_ON"  = CLSE."FOURTH_LEVEL_APPROVED_ON";
    				
    				
    				
		LT_VAR_OUT :='s'; 
		LT_POSTING_X = SELECT * FROM :LT_POSTING_CUTOFF_N;
	
END